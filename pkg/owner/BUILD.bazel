load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

go_library(
    name = "owner_lib",
    srcs = [
        "main.go",
        "server.go",
        "service.go",
    ],
    importpath = "github.com/fapiper/onchain-access-control/pkg/owner",
    visibility = ["//visibility:private"],
    deps = [
        "//config",
        "//log",
        "//pkg/server/framework",
        "//pkg/server/handler",
        "//pkg/server/middleware",
        "//pkg/server/router",
        "//pkg/service/auth",
        "//pkg/service/credential",
        "//pkg/service/did",
        "//pkg/service/framework",
        "//pkg/service/keystore",
        "//pkg/service/operation",
        "//pkg/service/presentation",
        "//pkg/service/schema",
        "//pkg/service/webhook",
        "//pkg/service/well-known",
        "//pkg/storage",
        "@com_github_ardanlabs_conf//:conf",
        "@com_github_gin_gonic_gin//:gin",
        "@com_github_pkg_errors//:errors",
        "@com_github_sirupsen_logrus//:logrus",
        "@com_github_swaggo_files//:files",
        "@com_github_swaggo_gin_swagger//:gin-swagger",
        "@com_github_tbd54566975_ssi_sdk//schema",
        "@com_github_tbd54566975_ssi_sdk//util",
        "@io_opentelemetry_go_contrib_instrumentation_github_com_gin_gonic_gin_otelgin//:otelgin",
    ],
)

go_binary(
    name = "owner",
    embed = [":owner_lib"],
    visibility = ["//visibility:public"],
)

# Put app go_binary into a tar layer.
pkg_tar(
    name = "owner_layer",
    srcs = [":owner"],
    # If the binary depends on RUNFILES, uncomment the attribute below.
    # include_runfiles = True
)

oci_image(
    name = "image",
    base = "@distroless_base",
    # entrypoint = ["/owner"],
    tars = [":owner_layer"],
)

# This is the target that should be released to the target platform
platform_transition_filegroup(
    name = "transitioned_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": "@io_bazel_rules_go//go/toolchain:linux_arm64",
        "@platforms//cpu:x86_64": "@io_bazel_rules_go//go/toolchain:linux_amd64",
    }),
)

# $ bazel build :owner
# $ docker load --input $(bazel cquery --output=files :owner)
# $ docker run --rm gcr.io/example:latest
#   string(
# -       "Hello World",
# +       "Hello Go",
#   )
#oci_tarball(
#    name = "owner",
#    # Use the image built for the exec platform rather than the target platform
#    image = ":image",
#    repo_tags = ["gcr.io/example:latest"],
#)
